#pragma kernel CSMain

uint Resolution;

Texture2D<float> Panorama;
StructuredBuffer<float3> Rays;
StructuredBuffer<float2> Angles;
RWStructuredBuffer<float4> PointCloud;

float MaxDistance;

float BoxRayIntersectSimple(float3 dir, float3 boxMin, float3 boxMax)
{
    float3 invDir = 1.0 / dir;
    
    float3 rbmin = boxMin * invDir;
    float3 rbmax = boxMax * invDir;

    float3 rbminmax = (dir > 0.0) ? rbmax : rbmin;

    return min(min(rbminmax.x, rbminmax.y), rbminmax.z);
}

[numthreads(32, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{   
    float3 ray = Rays[id.x]; 
    float2 angles = Angles[id.x];

    uint x = floor(angles.x * Resolution * 2);
    uint y = floor(angles.y * Resolution);

    uint2 coordinates = uint2(x, y);
    
    ray *= BoxRayIntersectSimple(ray, float3(-1, -1, -1), float3(1, 1, 1));    

    float distance = Panorama[coordinates.xy].x;

    if (distance > 0.999)
    {
        PointCloud[id.x] = float4(0, 0, 0, 0);
        return;
    }

    distance *= MaxDistance;

    float3 position = ray * distance;
    PointCloud[id.x] = float4(position, 1);
}
