#include "UnityShaderVariables.cginc"

#pragma max_recursion_depth 1

RaytracingAccelerationStructure SceneAccelerationStructure;
StructuredBuffer<float3> Rays;
float MaxDistance;
RWStructuredBuffer<float4> PointCloud;

struct RayPayload
{
    float4 color;
};

struct RayAttributes
{
    float2 barycentrics;
};

[shader("miss")]
void MainMissShader(inout RayPayload payload : SV_RayPayload)
{
    payload.color = float4(0, 0, 0, 0);
}

[shader("closesthit")]
void MainClosestHitShader(inout RayPayload payload : SV_RayPayload, in RayAttributes attr : SV_IntersectionAttributes)
{
    float3 worldRayOrigin = WorldRayOrigin() + WorldRayDirection() * RayTCurrent();
    payload.color = float4(worldRayOrigin, 1);
}

[shader("raygeneration")]
void GenerateLidarRays()
{
    uint x = DispatchRaysIndex().x;

    float3 rayDirection = Rays[x];
    rayDirection = normalize(mul((float3x3)unity_CameraToWorld, rayDirection));

    RayDesc ray;
    ray.Origin    = _WorldSpaceCameraPos;
    ray.Direction = rayDirection;
    ray.TMin      = 0.0f;
    ray.TMax      = MaxDistance;

    RayPayload payload;

    TraceRay(SceneAccelerationStructure, RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH, 0xFF, 0, 1, 0, ray, payload);
    
    float3 position = payload.color.xyz;
    position -= _WorldSpaceCameraPos;

    position = mul((float3x3)unity_WorldToCamera, position);

    PointCloud[x] = float4(position, 1);
}
